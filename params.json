{"name":"Autodesk Portal Idiomatic JS","tagline":"A Javascript Style Guide","body":"# Principles of Writing Consistent, Idiomatic JavaScript\r\n------------------------------------------------\r\n\r\n1. <a name='whitespace'>Whitespace</a>\r\n  - Never mix spaces and tabs.\r\n  - Configure your editor to use soft tabs with an indent size of **four** characters &mdash; this means four spaces or four spaces representing a real tab.\r\n  - Use [Editorconfig](http://editorconfig.org/) when possible.  It supports most IDEs and handles most whitespace settings.\r\n\r\n2. <a name='spacing'>Beautiful Syntax</a>\r\n\r\n    A. Parens, Braces, Linebreaks\r\n\r\n    ```javascript\r\n\r\n    // if/else/for/while/try always have spaces, braces and span multiple lines\r\n    // this encourages readability\r\n\r\n    // 2.A.1.1\r\n    // Examples of really cramped syntax\r\n\r\n    if(condition) doSomething();\r\n\r\n    while(condition) iterating++;\r\n\r\n    for(var i=0;i<100;i++) someIterativeFn();\r\n\r\n\r\n    // 2.A.1.1\r\n    // Use whitespace to promote readability\r\n\r\n    if ( condition ) {\r\n      // statements\r\n    }\r\n\r\n    while ( condition ) {\r\n      // statements\r\n    }\r\n\r\n    for ( var i = 0; i < 100; i++ ) {\r\n      // statements\r\n    }\r\n\r\n    // Even better:\r\n\r\n    var i,\r\n      length = 100;\r\n\r\n    for ( i = 0; i < length; i++ ) {\r\n      // statements\r\n    }\r\n\r\n    var prop;\r\n\r\n    for ( prop in object ) {\r\n      // statements\r\n    }\r\n\r\n\r\n    if ( true ) {\r\n      // statements\r\n    } else {\r\n      // statements\r\n    }\r\n    ```\r\n\r\n\r\n    B. Assignments, Declarations, Functions ( Named, Expression, Constructor )\r\n\r\n    ```javascript\r\n\r\n    // 2.B.1.1\r\n    // Variables\r\n    var foo = 'bar',\r\n      num = 1,\r\n      undef;\r\n\r\n    // Literal notations:\r\n    var array = [],\r\n      object = {};\r\n\r\n\r\n    // 2.B.1.2\r\n    // Using only one `var` per scope (function) promotes readability\r\n    // and keeps your declaration list free of clutter (also saves a few keystrokes)\r\n\r\n    // Bad\r\n    var foo = '';\r\n    var bar = '';\r\n    var qux;\r\n\r\n    // Good\r\n    var foo = '',\r\n      bar = '',\r\n      qux;\r\n\r\n    // or..\r\n    var // Comment on these\r\n    foo = '',\r\n    bar = '',\r\n    quux;\r\n\r\n    // 2.B.1.3\r\n    // var statements should always be in the beginning of their respective scope (function).\r\n\r\n\r\n    // Bad\r\n    function foo() {\r\n\r\n      // some statements here\r\n\r\n      var bar = '',\r\n        qux;\r\n    }\r\n\r\n    // Good\r\n    function foo() {\r\n      var bar = '',\r\n        qux;\r\n\r\n      // all statements after the variables declarations.\r\n    }\r\n\r\n    // 2.B.1.4\r\n    // const and let, from ECMAScript 6, should likewise be at the top of their scope (block).\r\n\r\n    // Bad\r\n    function foo() {\r\n      let foo,\r\n        bar;\r\n      if (condition) {\r\n        bar = '';\r\n        // statements\r\n      }\r\n    }\r\n    // Good\r\n    function foo() {\r\n      let foo;\r\n      if (condition) {\r\n        let bar = '';\r\n        // statements\r\n      }\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n\r\n    // 2.B.2.1\r\n    // Named Function Declaration\r\n    function foo( arg1, argN ) {\r\n\r\n    }\r\n\r\n    // Usage\r\n    foo( arg1, argN );\r\n\r\n\r\n    // 2.B.2.2\r\n    // Named Function Declaration\r\n    function square( number ) {\r\n      return number * number;\r\n    }\r\n\r\n    // Usage\r\n    square( 10 );\r\n\r\n    // Really contrived continuation passing style\r\n    function square( number, callback ) {\r\n      callback( number * number );\r\n    }\r\n\r\n    square( 10, function( square ) {\r\n      // callback statements\r\n    });\r\n\r\n\r\n    // 2.B.2.3\r\n    // Function Expression\r\n    var square = function( number ) {\r\n      // Return something valuable and relevant\r\n      return number * number;\r\n    };\r\n\r\n    // Function Expression with Identifier\r\n    // This preferred form has the added value of being\r\n    // able to call itself and have an identity in stack traces:\r\n    var factorial = function factorial( number ) {\r\n      if ( number < 2 ) {\r\n        return 1;\r\n      }\r\n\r\n      return number * factorial( number - 1 );\r\n    };\r\n\r\n\r\n    // 2.B.2.4\r\n    // Constructor Declaration\r\n    function FooBar( options ) {\r\n\r\n      this.options = options;\r\n    }\r\n\r\n    // Usage\r\n    var fooBar = new FooBar({ a: 'alpha' });\r\n\r\n    fooBar.options;\r\n    // { a: 'alpha' }\r\n\r\n    ```\r\n    \r\n    C. Exceptions, Slight Deviations\r\n\r\n    ```javascript\r\n\r\n    // 2.C.1.1\r\n    // Functions with callbacks\r\n    foo(function() {\r\n      // Note there is no extra space between the first paren\r\n      // of the executing function call and the word 'function'\r\n    });\r\n\r\n    // Function accepting an array, no space\r\n    foo([ 'alpha', 'beta' ]);\r\n\r\n    // 2.C.1.2\r\n    // Function accepting an object, no space\r\n    foo({\r\n      a: 'alpha',\r\n      b: 'beta'\r\n    });\r\n\r\n    // Single argument string literal, no space\r\n    foo('bar');\r\n\r\n    // Inner grouping parens, no space\r\n    if ( !('foo' in obj) ) {\r\n\r\n    }\r\n\r\n    ```\r\n\r\n    D. Consistency Always Wins\r\n\r\n    In sections 2.A-2.C, the whitespace rules are set forth as a recommendation with a simpler, higher purpose: consistency.\r\n\r\n    ```javascript\r\n\r\n    // 2.D.1.1\r\n\r\n    if (condition) {\r\n      // statements\r\n    }\r\n\r\n    while (condition) {\r\n      // statements\r\n    }\r\n\r\n    for (var i = 0; i < 100; i++) {\r\n      // statements\r\n    }\r\n\r\n    if (true) {\r\n      // statements\r\n    } else {\r\n      // statements\r\n    }\r\n\r\n    ```\r\n\r\n    E. Quotes\r\n\r\n    For the sake of consistency **use single quotes**. Double quotes should only be used if nested within single quotes.\r\n\r\n    F. End of Lines and Empty Lines\r\n\r\n    Whitespace can ruin diffs and make changesets impossible to read. Consider incorporating a pre-commit hook that removes end-of-line whitespace and blanks spaces on empty lines automatically. **TO DO**\r\n\r\n3. <a name='type'>Type Checking (Courtesy jQuery Core Style Guidelines)</a>\r\n\r\nPlease use the type checking methods provided by [Underscore](http://underscorejs.org/).\r\n\r\n    A. Actual Types\r\n\r\n    String:\r\n\r\n        _.isString(variable)\r\n\r\n    Number:\r\n\r\n        _.isNumber(variable)\r\n\r\n    Boolean:\r\n\r\n        _.isBoolean(variable)\r\n\r\n    Object:\r\n\r\n        _.isObject(variable)\r\n\r\n    Array:\r\n\r\n        _.isArray(variable)\r\n\r\n    null:\r\n\r\n        _.isNull(variable)\r\n\r\n    undefined:\r\n\r\n      _.isUndefined(variable)\r\n\r\n\r\n4. <a name='cond'>Conditional Evaluation</a>\r\n\r\n    ```javascript\r\n\r\n    // 4.1.1\r\n    // When only evaluating that an array has length,\r\n    // instead of this:\r\n    if ( array.length > 0 ) ...\r\n\r\n    // ...evaluate truthiness, like this:\r\n    if ( array.length ) ...\r\n\r\n\r\n    // 4.1.2\r\n    // When only evaluating that an array is empty,\r\n    // instead of this:\r\n    if ( array.length === 0 ) ...\r\n\r\n    // ...evaluate truthiness, like this:\r\n    if ( !array.length ) ...\r\n\r\n\r\n    // 4.1.3\r\n    // When only evaluating that a string is not empty,\r\n    // instead of this:\r\n    if ( string !== '' ) ...\r\n\r\n    // ...evaluate truthiness, like this:\r\n    if ( string ) ...\r\n\r\n\r\n    // 4.1.4\r\n    // When only evaluating that a string _is_ empty,\r\n    // instead of this:\r\n    if ( string === '' ) ...\r\n\r\n    // ...evaluate falsy-ness, like this:\r\n    if ( !string ) ...\r\n\r\n\r\n    // 4.1.5\r\n    // When only evaluating that a reference is true,\r\n    // instead of this:\r\n    if ( foo === true ) ...\r\n\r\n    // ...evaluate like you mean it, take advantage of built in capabilities:\r\n    if ( foo ) ...\r\n\r\n\r\n    // 4.1.6\r\n    // When evaluating that a reference is false,\r\n    // instead of this:\r\n    if ( foo === false ) ...\r\n\r\n    // ...use negation to coerce a true evaluation\r\n    if ( !foo ) ...\r\n\r\n    // ...Be careful, this will also match: 0, '', null, undefined, NaN\r\n    // If you _MUST_ test for a boolean false, then use\r\n    if ( foo === false ) ...\r\n\r\n\r\n    // 4.1.7\r\n    // When only evaluating a ref that might be null or undefined, but NOT false, '' or 0,\r\n    // instead of this:\r\n    if ( foo === null || foo === undefined ) ...\r\n\r\n    // ...take advantage of == type coercion, like this:\r\n    if ( foo == null ) ...\r\n\r\n    // Remember, using == will match a `null` to BOTH `null` and `undefined`\r\n    // but not `false`, '' or 0\r\n    null == undefined\r\n\r\n    ```\r\n    ALWAYS evaluate for the best, most accurate result - the above is a guideline, not a dogma.\r\n\r\n5. <a name='practical'>Practical Style</a>\r\n\r\nPortal uses RequireJS to manage dependencies. Therefore files should be written as AMD modules. Use [simplified CommonJS wrapper](http://requirejs.org/docs/api.html#cjsmodule) for requiring dependencies. \r\n\r\n    ```javascript\r\n\r\n    // 5.1.1\r\n    // A Practical Module\r\n\r\n    define(function(require){\r\n      var dependency = require('dependency'),\r\n          privateVar;\r\n      return {\r\n        public API here...\r\n      };\r\n    });\r\n\r\n    ```\r\n\r\n6. <a name='naming'>Naming</a>\r\n\r\n    A. You are not a human code compiler/compressor, so don't try to be one.\r\n\r\n    The following code is an example of egregious naming:\r\n\r\n    ```javascript\r\n\r\n    // 6.A.1.1\r\n    // Example of code with poor names\r\n\r\n    function q(s) {\r\n      return document.querySelectorAll(s);\r\n    }\r\n    var i,a=[],els=q('#foo');\r\n    for(i=0;i<els.length;i++){a.push(els[i]);}\r\n    ```\r\n\r\n    Here's the same piece of logic, but with kinder, more thoughtful naming (and a readable structure):\r\n\r\n    ```javascript\r\n\r\n    // 6.A.2.1\r\n    // Example of code with improved names\r\n\r\n    function query( selector ) {\r\n      return document.querySelectorAll( selector );\r\n    }\r\n\r\n    var idx = 0,\r\n      elements = [],\r\n      matches = query('#foo'),\r\n      length = matches.length;\r\n\r\n    for ( ; idx < length; idx++ ) {\r\n      elements.push( matches[ idx ] );\r\n    }\r\n\r\n    ```\r\n\r\n    A few additional naming pointers:\r\n\r\n    ```javascript\r\n\r\n    // 6.A.3.1\r\n    // Naming strings\r\n\r\n    `dog` is a string\r\n\r\n\r\n    // 6.A.3.2\r\n    // Naming arrays\r\n\r\n    `dogs` is an array of `dog` strings\r\n\r\n\r\n    // 6.A.3.3\r\n    // Naming functions, objects, instances, etc\r\n\r\n    camelCase; function and var declarations\r\n\r\n\r\n    // 6.A.3.4\r\n    // Naming constructors, prototypes, etc.\r\n\r\n    PascalCase; constructor function\r\n\r\n\r\n    // 6.A.3.6\r\n    // From the Google Closure Library Style Guide\r\n\r\n    functionNamesLikeThis;\r\n    variableNamesLikeThis;\r\n    ConstructorNamesLikeThis;\r\n    EnumNamesLikeThis;\r\n    methodNamesLikeThis;\r\n    SYMBOLIC_CONSTANTS_LIKE_THIS;\r\n\r\n    ```\r\n\r\n    B. Faces of `this`\r\n\r\n    Beyond the generally well known use cases of `call` and `apply`, always prefer [Underscore](http://underscorejs.org/)'s `_.bind( functionName, this )`, for creating `BoundFunction` definitions for later invocation. Only resort to aliasing (ie. var that = this) when no preferable option is available.\r\n\r\n    ```javascript\r\n\r\n    // 6.B.1\r\n    function Device( opts ) {\r\n\r\n      this.value = null;\r\n\r\n      // open an async stream,\r\n      // this will be called continuously\r\n      stream.read( opts.path, _.bind(function( data ) {\r\n\r\n        // Update this instance's current value\r\n        // with the most recent value from the\r\n        // data stream\r\n        this.value = data;\r\n\r\n      }, this) );\r\n\r\n      // Throttle the frequency of events emitted from\r\n      // this Device instance\r\n      setInterval(_.bind(function() {\r\n\r\n        // Emit a throttled event\r\n        this.emit('event');\r\n\r\n      }, this), opts.freq || 100 );\r\n    }\r\n\r\n    // Just pretend we've inherited EventEmitter ;)\r\n\r\n    ```\r\n    As a last resort, create an alias to `this` using `self` as an Identifier. This is bug prone and should be avoided whenever possible.\r\n\r\n    ```javascript\r\n\r\n    // 6.B.3\r\n\r\n    function Device( opts ) {\r\n      var self = this;\r\n\r\n      this.value = null;\r\n\r\n      stream.read( opts.path, function( data ) {\r\n\r\n        self.value = data;\r\n\r\n      });\r\n\r\n      setInterval(function() {\r\n\r\n        self.emit('event');\r\n\r\n      }, opts.freq || 100 );\r\n    }\r\n\r\n    ```\r\n\r\n\r\n    C. Use `thisArg`\r\n\r\n    Several prototype methods of ES 5.1 built-ins come with a special `thisArg` signature, which should be used whenever possible\r\n\r\n7. <a name='dependency-injection'>Dependency Injection</a>\r\n\r\n    When authoring AMD-style modules (as with RequireJS), long lists of dependencies should be written using [simplified CommonJS wrapping](http://requirejs.org/docs/whyamd.html#sugar) to promote readability.\r\n\r\n    ```javascript\r\n    // 7.A.1.1\r\n    // Bad\r\n    define([ 'require', 'jquery', 'blade/object', 'blade/fn', 'rdapi',\r\n         'oauth', 'blade/jig', 'blade/url', 'dispatch'],\r\n    function (require,   $,        object,         fn,         rdapi,\r\n          oauth,   jig,         url,         dispatch) {\r\n\r\n    });\r\n\r\n    // Good\r\n    define(function(require){\r\n        var $ = require('jquery'),        \r\n            object = require('blade/object'),         \r\n            fn = require('blade/fn'),         \r\n            rdapi = require('rdapi'),\r\n            oauth = require('oauth'),   \r\n            jig = require('blade/jig'),         \r\n            url = require('blade/url'),         \r\n            dispatch = require('dispatch');\r\n\r\n    });\r\n    ```\r\n10. <a name='comments'>Comments</a>\r\n    - Single line above the code that is subject\r\n    - Multiline is good\r\n    - End of line comments are prohibited!\r\n    - JSDoc style is good, but requires a significant time investment\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}